{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1731263642055}],"collapsed_sections":["ra45s33wUt-C","ia9UtA0cU1Iy","eecUb-akU1ji","QGrsZrv5U1s8"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731604128178,"user_tz":-300,"elapsed":14338,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"6cd33327-deb1-410d-a790-f9571a14c13d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Что сделать? выход\n"]}],"source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","\n","# функция для отправки запроса\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print('Response code:', response.status_code)\n","        return False\n","\n","\n","def get_apod(): #почему-то не работает\n","  url = 'https://api.nasa.gov/planetary/apod'\n","  response = requests.get(url)\n","\n","  res = requests.get(url)\n","  if res.status_code != 200:\n","    print('Response code:', res.status_code)\n","  else:\n","    img = Image.open(io.BytesIO(res.content))\n","    display(img)\n","\n","\n","def get_mars_photos(): #почему-то не работает\n","  url = 'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=BgkPrZ4zmd5MvRtCiP2km1fxoyQ2N9HZRnbaReVb'\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","    photos = data['photos']\n","    for photo in photos:\n","      img_url = photo['img_src']\n","      img_response = requests.get(img_url)\n","      img = Image.open(io.BytesIO(img_response.content))\n","      display(img)\n","  else:\n","    print('Response code:', response.status_code)\n","\n","\n","def get_near_earth_objects():\n","  url='' #не нашёл\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","    objects = data['near_earth_objects']\n","    for obj in objects:\n","      print(obj)\n","  else:\n","    print('Response code:', response.status_code)\n","\n","\n","def get_space_weather():\n","  url = '' #не нашёл\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","    print(data)\n","  else:\n","    print('Response code:', response.status_code)\n","\n","\n","# основная функция\n","def main():\n","    a = input('Что сделать? ')\n","    url = 'https://api.nasa.gov/planetary/apod?api_key=BgkPrZ4zmd5MvRtCiP2km1fxoyQ2N9HZRnbaReVb'\n","    while a != 'выход':\n","        if a == 'астрономическая картинка дня':\n","            get_apod()\n","        if a == 'фотографии с марсохода':\n","            get_mars_photos()\n","        if a == 'объекты, сближающиеся с Землей':\n","            get_near_earth_objects()\n","        if a == 'данные о космической погоде':\n","            get_space_weather()\n","\n","\n","if __name__ == '__main__':\n","    main()"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"jjUH1GznU1Iy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731663296822,"user_tz":-300,"elapsed":5096,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"e04619d5-e757-4133-c937-71f99f0a6ce4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Что сделать? Выход\n"]}],"source":["import requests\n","\n","\n","def get_artworks(page=1):\n","    url = f\"https://api.artic.edu/api/v1/artworks?page={page}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        return data['data'], data['pagination']\n","    else:\n","        print('Response code:', response.status_code)\n","        return [], {}\n","\n","\n","def filtered_artworks(artworks, artist_name):\n","    filter_artworks = []\n","    for artwork in artworks:\n","        if 'artist_title' in artwork and artist_name.lower() in artwork['artist_title'].lower():\n","            filter_artworks.append(artwork)\n","    return filter_artworks\n","\n","\n","def artwork_details(artwork):\n","    if artwork:\n","        print(f\"Название: {artwork['title']}\")\n","        print(f\"Исполнитель: {artwork['artist_title']}\")\n","        print(f\"Дата: {artwork.get('date_display', 'Не указано')}\")\n","        print(f\"Носитель: {artwork.get('medium_display', 'Не указано')}\")\n","\n","\n","def main():\n","    page = 1\n","    while a:=input('Что сделать? ')!='Выход':\n","        artworks, numer = get_artworks(page)\n","        if not artworks:\n","            print(\"Не удалось получить произведения искусства.\")\n","            break\n","\n","        print(f\"\\nСтраница {page} из {numer.get('total_pages', 1)}\")\n","        for i, artwork in enumerate(artworks):\n","            print(f\"{i + 1}. {artwork['title']}\")\n","\n","        numv = input(\"\\nВыберите действие:\\n\"\n","                       \"1. Просмотреть подробную информацию о произведении\\n\"\n","                       \"2. Фильтровать по исполнителю\\n\"\n","                       \"3. Следующая страница\\n\"\n","                       \"4. Предыдущая страница\\n\")\n","\n","        if numv == '1':\n","            artwork_index = int(input(\"Введите номер произведения: \")) - 1\n","            if 0 <= artwork_index < len(artworks):\n","                artwork_details(artworks[artwork_index])\n","            else:\n","                print(\"Неверный номер произведения.\")\n","        elif numv == '2':\n","            artist_name = input(\"Введите имя исполнителя: \")\n","            filter_artworks = filter_artworks(artworks, artist_name)\n","            if filter_artworks:\n","                for i, artwork in enumerate(filter_artworks):\n","                    print(f\"{i + 1}. {artwork['title']}\")\n","            else:\n","                print(\"Произведения искусства не найдены.\")\n","        elif numv == '3':\n","            if page < numer.get('total_pages', 1):\n","                page += 1\n","        elif numv == '4':\n","            if page > 1:\n","                page -= 1\n","        elif numv == '5':\n","            break\n","        else:\n","            print(\"Неверный выбор.\")\n","\n","\n","if __name__ == '__main__':\n","    main()"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","import datetime\n","\n","\n","def get_crypto(id):\n","    url = f\"https://api.coingecko.com/api/v3/simple/price?ids={id}&vs_currencies=usd\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if id in data:\n","            return data[id]['usd']\n","    else:\n","        print('Response code:', response.status_code)\n","\n","\n","def get_crypto_svodka(id, days=7):\n","    url = f\"https://api.coingecko.com/api/v3/coins/{id}/market_chart?vs_currency=usd&days={days}&interval=daily\"\n","    today_dy = datetime.date.today()\n","    from_date = today_dy - datetime.timedelta(days=days)\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        data = response.json()\n","        if 'prices' in data:\n","            return data['prices']\n","        else:\n","            return None\n","    else:\n","        print('Response code:', response.status_code)\n","\n","\n","def main():\n","    portfolio = {}\n","    while a:=input('? ')!='Выход': #Почему-то не работает выход\n","        print(\"\\nВыберите действие:\")\n","        print(\"1. Добавить криптовалюту в портфель\")\n","        print(\"2. Просмотреть свой портфель\")\n","        print(\"3. Просмотреть сводку данных о цене\")\n","        numv = input(\"Введите что-нибудь: \")\n","\n","        if numv == \"1\":\n","            id = input(\"Введите ID криптовалюты: \")\n","            countt = float(input(\"Введите количество: \"))\n","            portfolio[id] = countt\n","            print(\"Криптовалюта добавлена.\")\n","        elif numv == \"2\":\n","            portfolio_price = 0\n","            print(\"\\nВаш портфель:\")\n","            for id, countt in portfolio.items():\n","                price = get_crypto(id)\n","                if price:\n","                    value = price * countt\n","                    portfolio_price += value\n","                    print(f\"{id}: {countt} шт., Цена: {price}$, Общая стоимость: {value}$\")\n","                else:\n","                    print(f\"Не удалось получить цену {id}\")\n","            print(f\"\\nСтоимость портфеля: {portfolio_price}$\")\n","        elif numv == \"3\":\n","            id = input(\"Введите ID криптовалюты для просмотра цен: \")\n","            svodka_data = get_crypto_svodka(id)\n","            if svodka_data:\n","                print(f\"\\nСводка данных цены {id}:\")\n","                for timestamp, price in svodka_data:\n","                    date = datetime.datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d')\n","                    print(f\"{date}: {price}$\")\n","            else:\n","                print(f\"Не удалось получить сводку данных о {id}\")\n","        else:\n","            print(\"Неверный выбор.\")\n","\n","\n","if __name__ == '__main__':\n","    main()"],"metadata":{"id":"_0DToTqlvywa","colab":{"base_uri":"https://localhost:8080/","height":587},"executionInfo":{"status":"error","timestamp":1731605182524,"user_tz":-300,"elapsed":31222,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"7095df43-c1dc-425f-d868-ddfc51967798"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["? Начать\n","\n","Выберите действие:\n","1. Добавить криптовалюту в портфель\n","2. Просмотреть свой портфель\n","3. Просмотреть сводку данных о цене\n","Введите что-нибудь: Выход\n","Неверный выбор.\n","? выход\n","\n","Выберите действие:\n","1. Добавить криптовалюту в портфель\n","2. Просмотреть свой портфель\n","3. Просмотреть сводку данных о цене\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-7f75e4c1ad37>\u001b[0m in \u001b[0;36m<cell line: 72>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-17-7f75e4c1ad37>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"2. Просмотреть свой портфель\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3. Просмотреть сводку данных о цене\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m         \u001b[0mnumv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите что-нибудь: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnumv\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}