{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TEBJaKANAI0JxDY268tNeKGpHMChb2sK","timestamp":1729245456232}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"Bu5gIJfHNPHw"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"CbHI8c7cM9Eg"},"outputs":[],"source":["Чикин Алексей Юрьевич ПИИ АТ-09"]},{"cell_type":"markdown","source":["# **Задание 1**"],"metadata":{"id":"VrNrBpmocGRd"}},{"cell_type":"markdown","source":["\n","\n","Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени\n","\n","Дано:\n","\n","```\n","{\"Alice\": 25, \"Bob\": 30, \"Charlie\": 35}\n","```\n","\n","Вввод:\n","\n","\n","```\n","Alice\n","```\n","\n","Вывод:\n","\n","\n","```\n","Alice 25\n","```\n"],"metadata":{"id":"XhV1bnm1bR2h"}},{"cell_type":"code","source":["names={\"Alice\": 25, \"Bob\": 30, \"Charlie\": 35}\n","namei=input()\n","print(namei,names[namei])"],"metadata":{"id":"PElJj6DvsgjD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729245562108,"user_tz":-300,"elapsed":3580,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"433847f4-9119-4d24-e516-674966b30626"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Alice\n","Alice 25\n"]}]},{"cell_type":"markdown","source":["# **Задание 2**\n"],"metadata":{"id":"lpjJz-_YcJ-t"}},{"cell_type":"markdown","source":["\n","\n","Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка\n","\n","Ввод:\n","\n","```\n","1, 2, 3, 4, 5, 6, 7, 8, 9\n","```\n","\n","Вывод:\n","\n","\n","```\n","20\n","```\n","\n","***Запрещено:***\n","\n","*   Использование готовых функций для суммирования чисел\n"],"metadata":{"id":"tMEsAB4rUiWW"}},{"cell_type":"code","source":["ll = input().split(', ')\n","sum1=0\n","for i in ll:\n","  if int(i)>0 and int(i)%2==0:\n","    sum1+=int(i)\n","print(sum1)\n"],"metadata":{"id":"wDNUFLeqNQS_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729245870780,"user_tz":-300,"elapsed":2942,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"440a10b8-bdb9-4dce-8793-8b2d97169ea2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1, 2, 3, 4, 5, 6, 7, 8, 9\n","20\n"]}]},{"cell_type":"markdown","source":["# **Задание 3**"],"metadata":{"id":"WT_v-vz1dUZJ"}},{"cell_type":"markdown","source":["Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов\n","\n","\n","Дано:\n","\n","```\n","fruits_and_colors = {\n","    \"apple\": \"red\",\n","    \"banana\": \"yellow\",\n","    \"mango\": \"yellow\",\n","    \"orange\": \"orange\",\n","    \"lemon\": \"yellow\",\n","    \"grape\": \"purple\"\n","}\n","```\n","\n","Вывод:\n","\n","\n","```\n","Yellow fruits:\n","banana\n","lemon\n","mango\n","```\n","\n"],"metadata":{"id":"ZI5Xeh2DdXgF"}},{"cell_type":"code","source":["fruits_and_colors = {\n","    \"apple\": \"red\",\n","    \"banana\": \"yellow\",\n","    \"mango\": \"yellow\",\n","    \"orange\": \"orange\",\n","    \"lemon\": \"yellow\",\n","    \"grape\": \"purple\"\n","}\n","print('Yellow fruits:')\n","for i in fruits_and_colors.keys():\n","  if fruits_and_colors[i]=='yellow':\n","    print(i)"],"metadata":{"id":"aNzFTkhKdkTG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729246086499,"user_tz":-300,"elapsed":293,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"4a099e0c-6ffd-4e35-dd4b-9e85c916b027"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Yellow fruits:\n","banana\n","mango\n","lemon\n"]}]},{"cell_type":"markdown","source":["# **Задание 4**\n"],"metadata":{"id":"iHtMGt2icM7w"}},{"cell_type":"markdown","source":["\n","\n","Дан словарь, необходимо написать функцию меняющую ключ и значение местами\n","\n","Дано:\n","\n","\n","```\n","{\"a\": 1, \"b\": 2, \"c\": 3}\n","```\n","\n","Вывод:\n","\n","```\n","{1: 'a', 2: 'b', 3: 'c'}\n","```\n","\n"],"metadata":{"id":"rS3THsnBQ_EB"}},{"cell_type":"code","source":["dict = {\"a\": 1, \"b\": 2, \"c\": 3}\n","\n","\n","def kv_swap(dict):\n","  kk=list(dict.keys())\n","  vv=list(dict.values())\n","  dict.clear()\n","  for n,i in enumerate(vv):\n","      dict[i]=kk[n]\n","  return dict\n","\n","\n","kv_swap(dict)"],"metadata":{"id":"MNRusyLDcQ59","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729247241742,"user_tz":-300,"elapsed":262,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"fb049800-fb50-4bbd-bada-a05f336aaf21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1: 'a', 2: 'b', 3: 'c'}"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["# **Задание 5**"],"metadata":{"id":"x6ff5nd0cUxD"}},{"cell_type":"markdown","source":["Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество слов\n","\n","**Критерии**\n","\n","\n","*   Словарь необходимо отсортировать по убыванию количества элементов в списке.\n","*   Подсчет элементов должен быть реализован в отдельной функции\n","*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции\n","\n","\n","\n","\n","Дано:\n","```\n","['apple','banana','orange','apple','apple','banana']\n","```\n","\n","\n","Вывод:\n","```\n","{'apple':3, 'banana': 2, 'orange': 1}\n","```\n","\n","***Запрещено:***\n","\n","*   Использование готовых функций для сортировки\n","*   Использование готовых функций для подсчета элементов\n","\n"],"metadata":{"id":"ypQNHOG4NQz3"}},{"cell_type":"code","source":["ll=['banana','apple','orange','apple','apple','banana']\n","\n","\n","def countof(ll):\n","    sl={}\n","    for i in ll:\n","        if i not in sl.keys():\n","            sl[i]=1\n","        else:\n","            sl[i]+=1\n","    return sl\n","\n","\n","h=countof(ll)\n","\n","\n","def find_max(h):\n","    max_k=0\n","    max_v=0\n","    for key,value in h.items():\n","        if max_v<value:\n","            max_v = value\n","            max_k = key\n","    return max_k, max_v\n","\n","\n","def sorting(h):\n","    sorted_dict={}\n","    while h!={}:\n","        max_k,max_v = find_max(h)\n","        sorted_dict[max_k] = max_v\n","        del h[max_k]\n","    return sorted_dict\n","\n","\n","def main(ll):\n","    counts = countof(ll)\n","    sorted_dict = sorting(counts)\n","    print(sorted_dict)\n","\n","\n","main(ll)\n","# Подсказка: сортировку словаря можно сделать через две функции (нахождение максимального эллемента и основной функции сортировки)"],"metadata":{"id":"J10PjdVQUbyq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729252777008,"user_tz":-300,"elapsed":297,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"2beb523a-fd73-4a49-c156-f0d1e1312db1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple': 3, 'banana': 2, 'orange': 1}\n"]}]},{"cell_type":"markdown","source":["# **Задание 6**"],"metadata":{"id":"d7fDUr2WcY_G"}},{"cell_type":"markdown","source":["Дан словарь, содержащий информацию о людях, необходимо:\n","\n","\n","\n","*   Вывести всех людей старше 30 лет\n","*   Вывести список городов и количество людей из словаря проживающих в них\n","*   Вывести список профессий и список людей для каждой профессии\n","\n","**Критерии**\n","\n","Каждый из пунктов необходимо реализовать в виде функции\n","\n"],"metadata":{"id":"m11qdVhSWBi7"}},{"cell_type":"code","source":["people_info = {\n","    \"Alice\": {\"age\": 25, \"city\": \"New York\", \"occupation\": \"Engineer\"},\n","    \"Bob\": {\"age\": 30, \"city\": \"Los Angeles\", \"occupation\": \"Designer\"},\n","    \"Charlie\": {\"age\": 35, \"city\": \"Chicago\", \"occupation\": \"Teacher\"},\n","    \"Diana\": {\"age\": 28, \"city\": \"Miami\", \"occupation\": \"Doctor\"},\n","    \"Ethan\": {\"age\": 40, \"city\": \"Seattle\", \"occupation\": \"Chef\"},\n","    \"Frank\": {\"age\": 32, \"city\": \"Atlanta\", \"occupation\": \"Lawyer\"},\n","    \"Gabriella\": {\"age\": 29, \"city\": \"San Francisco\", \"occupation\": \"Software Engineer\"},\n","    \"Harrison\": {\"age\": 38, \"city\": \"Denver\", \"occupation\": \"Architect\"},\n","    \"Isabella\": {\"age\": 26, \"city\": \"Washington D.C.\", \"occupation\": \"Journalist\"},\n","    \"Julian\": {\"age\": 42, \"city\": \"Miami\", \"occupation\": \"Musician\"},\n","    \"Kate\": {\"age\": 31, \"city\": \"Philadelphia\", \"occupation\": \"Nurse\"},\n","    \"Lucas\": {\"age\": 36, \"city\": \"Nashville\", \"occupation\": \"Businessman\"},\n","    \"Mia\": {\"age\": 27, \"city\": \"Atlanta\", \"occupation\": \"Artist\"},\n","    \"Natalie\": {\"age\": 39, \"city\": \"Portland\", \"occupation\": \"Writer\"},\n","    \"Oliver\": {\"age\": 44, \"city\": \"Minneapolis\", \"occupation\": \"Professor\"},\n","    \"Penelope\": {\"age\": 33, \"city\": \"San Diego\", \"occupation\": \"Marketing Manager\"},\n","    \"Quincy\": {\"age\": 41, \"city\": \"Nashville\", \"occupation\": \"Singer\"},\n","    \"Rachel\": {\"age\": 34, \"city\": \"Cleveland\", \"occupation\": \"Teacher\"},\n","    \"Sophia\": {\"age\": 29, \"city\": \"Nashville\", \"occupation\": \"Engineer\"},\n","    \"Tessa\": {\"age\": 37, \"city\": \"Miami\", \"occupation\": \"Lawyer\"}\n","}"],"metadata":{"id":"lSNtB39OWtFl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def age30(people_info):\n","    ll=[]\n","    for k,v in people_info.items():\n","        if v['age']>30:\n","            ll.append(k)\n","    return ll\n","\n","\n","print(age30(people_info))\n","\n","\n","def goroda(people_info):\n","    kk={}\n","    for i in people_info.values():\n","        if i['city'] not in kk:\n","            kk[i['city']]=1\n","        else:\n","            kk[i['city']]+=1\n","    return kk\n","\n","\n","print(goroda(people_info))\n","\n","\n","def prof(people_info):\n","    jj={}\n","    for k,v in people_info.items():\n","        if v['occupation'] not in jj:\n","            jj[v['occupation']]=list()\n","            jj[v['occupation']].append(k)\n","        else:\n","            jj[v['occupation']].append(k)\n","    return jj\n","\n","\n","print(prof(people_info))"],"metadata":{"id":"qcLO5eQwXkNK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Задание 7**"],"metadata":{"id":"27IuB2YScezw"}},{"cell_type":"markdown","source":["Задание: Разработка системы отзывов о предметах\n","\n","Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.\n","\n","**Функционал:**\n","\n","*   Добавление отзыва и оценки:\n","   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.\n","   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).\n","*   Просмотр отзывов и оценок:\n","   *   Пользователь может запросить отзывы для указанного предмета.\n","   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.\n","*   Удаление отзыва:\n","   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.\n","   *   Программа должна обработать ситуацию, когда индекс введен неправильно.\n","*   Вычисление среднего балла по предмету:\n","   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.\n","   *   Если отзывов нет, программа должна сообщить об этом.\n","\n","\n","**Критерии:**\n","\n","*   Код должен быть оформлен в виде функций\n","*   Необходимо обрабатывать неправильный ввод пользователя\n","*   Должны быть комментарии к функциям\n","*   Присутсвует весь дополнительный функционал\n","\n","\n","\n","**Опционально:**\n","\n","Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару\n","\n","\n"],"metadata":{"id":"Fd95-S9cYhct"}},{"cell_type":"code","source":["a = input('Что хотите сделать? ')\n","lessons_fb = {1:['Нет отзывов.'],2:['Нет отзывов.'],3:['Нет отзывов.'],4:['Нет отзывов.'],5:['Нет отзывов.']}\n","lessons_fbo = {1:[],2:[],3:[],4:[],5:[]}\n","\n","\n","def add_fb(lessons_fb,lessons_fbo):\n","\n","  #Function \"Add Feedback\" - из названия понятно, что добавляет в словари нужные дынные (отзывы и оценки к парам).\n","  #:param lessons_fb: словарь с отзывами на 5 уже проведённых пар (просто как пример): string\n","  #:param lessons_fbo: словарь с оценками на 5 уже проведённых пар: integer\n","  #:return None: вывод не нужен, тк нет присваивания.\n","\n","  qu=int(input('На какую пару хотели бы оставить отзыв: '))\n","  if 0<qu<=len(lessons_fb):\n","    if lessons_fb[qu][0]=='Нет отзывов.':\n","      lessons_fb[qu]=[]\n","      lessons_fb[qu].append(input('Оставьте свой отзыв: '))\n","      lessons_fbo[qu].append(int(input('Ваша оценка (от 1 до 5): ')))\n","      print(\"Отзыв успешно добавлен.\\n\")\n","    else:\n","      lessons_fb[qu].append(input('Оставьте свой отзыв: '))\n","      lessons_fbo[qu].append(int(input('Ваша оценка (от 1 до 5): ')))\n","      print(\"Отзыв успешно добавлен.\\n\")\n","    return\n","  else:\n","    print('Такой пары ещё не было.\\n')\n","\n","\n","def check_fb(lessons_fb,lessons_fbo):\n","\n","  #Function \"Check Feedback\" - из названия понятно, что выводит отзыв(ы) с оценками на конкретную пару.\n","  #params:return: то же самое, что и в предыдущей функции.\n","\n","  qu=int(input('У какой пары хотели бы посмотреть отзыв: '))\n","  if 0<qu<=len(lessons_fb):\n","    qu2=input('Какой отзыв вы бы хотели посмотреть: ')\n","    if qu2=='Все':\n","      count=1\n","      for n,i in enumerate(list(lessons_fb[qu])):\n","        print('Отзыв №'+str(count)+': \\n'+'Оценка: '+str(lessons_fbo[qu][n])+'\\n'+i+'\\n')\n","        count+=1\n","    elif 0<int(qu2)<len(lessons_fb[qu])+1:\n","      print('Отзыв №'+str(qu2)+': \\n'+'Оценка: '+str(lessons_fbo[qu][int(qu2)-1])+'\\n'+lessons_fb[qu][int(qu2)-1]+'\\n')\n","    else:\n","      print('Такого отзыва еще не было.\\n')\n","  else:\n","    print('Такой пары ещё не было.\\n')\n","  return\n","\n","def del_fb(lessons_fb,lessons_fbo):\n","\n","  #Function \"Delete Feedback\" - из названия понятно, что удаляет отзывы и оценки у конкретных пар.\n","  #:params:return: то же самое, что и в предыдущей функции.\n","\n","  if len(list(lessons_fbo.values()))>0:\n","    print('Для удаления доступны отзывы: \\n')\n","    for k,v in lessons_fbo.items():\n","      co=len(v)\n","      if co>0:\n","        print(f'{k} пара: {co} отзыв(а/ов)')\n","    qu=int(input('\\nУ какой пары хотели бы удалить отзыв: '))\n","    if 0<qu<=len(lessons_fb):\n","      qu2=int(input('Какой отзыв вы бы хотели удалить: '))\n","      if 0<qu2<len(lessons_fb[qu])+1:\n","        del lessons_fb[qu][qu2-1]\n","        del lessons_fbo[qu][qu2-1]\n","        print('Отзыв удалён успешно.\\n')\n","      else:\n","        print('Такого отзыва ещё не было.\\n')\n","    else:\n","      print('Такой пары ещё не было.\\n')\n","  else:\n","    print('Ещё нет отзывов ни на одну пару.')\n","  return\n","\n","\n","def ave_r(lessons_fbo):\n","\n","  #Function \"Average Raiting\" - из названия понятно, что выводит средний рейтинг по конкретной паре.\n","  #:param lesson_fbo: только словарь с оценками, тк словарь с отзывами нам тут не нужен.\n","  #:return None: вывод не нужен, тк нет присваивания.\n","\n","  qu=int(input('У какой пары хотите узнать среднюю оценку.'))\n","  if 0<qu<=len(lessons_fb):\n","    if len(lessons_fbo[qu])>0:\n","      print('Средняя оценка пары: ',end='\\t')\n","      print(sum(lessons_fbo[qu])/len(lessons_fbo[qu]))\n","    else:\n","      print('У пары ещё нет оценок.\\n')\n","  else:\n","    print('Такой пары ещё не было.\\n')\n","  return\n","\n","\n","while a!='Ничего':\n","  if a=='Добавить отзыв к паре':\n","    add_fb(lessons_fb,lessons_fbo)\n","  elif a=='Проверить отзыв(ы) к паре':\n","    check_fb(lessons_fb,lessons_fbo)\n","  elif a=='Удалить отзыв у пары':\n","    del_fb(lessons_fb,lessons_fbo)\n","  elif a=='Узнать среднюю оценку пары':\n","    ave_r(lessons_fbo)\n","  else:\n","    print('Неверная команда.\\n')\n","  a = input('Что хотите сделать? ')"],"metadata":{"id":"kzucJrCUa0o7","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"error","timestamp":1729530809969,"user_tz":-300,"elapsed":26111,"user":{"displayName":"Urkis","userId":"03817156391522698014"}},"outputId":"5607656c-5bf4-4884-c74b-e824497eb315"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Что хотите сделать? Удалить отзыв у пары\n","Для удаления доступны отзывы: \n","\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-269023d56486>\u001b[0m in \u001b[0;36m<cell line: 95>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     99\u001b[0m     \u001b[0mcheck_fb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlessons_fb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlessons_fbo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m   \u001b[0;32melif\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'Удалить отзыв у пары'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m     \u001b[0mdel_fb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlessons_fb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlessons_fbo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m   \u001b[0;32melif\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'Узнать среднюю оценку пары'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m     \u001b[0mave_r\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlessons_fbo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-269023d56486>\u001b[0m in \u001b[0;36mdel_fb\u001b[0;34m(lessons_fb, lessons_fbo)\u001b[0m\n\u001b[1;32m     59\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mco\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{k} пара: {co} отзыв(а/ов)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mqu\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nУ какой пары хотели бы удалить отзыв: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0mqu\u001b[0m\u001b[0;34m<=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlessons_fb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m       \u001b[0mqu2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Какой отзыв вы бы хотели удалить: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]}]}